void pyramid(vector pos)
{
    int p0 = addpoint(0, pos + {1, 0, 1});
    int p1 = addpoint(0, pos + {1, 0, -1});
    int p2 = addpoint(0, pos + {-1, 0, 1});
    int p3 = addpoint(0, pos + {-1, 0, -1});
    int p4 = addpoint(0, pos + {0, 1.5, 0});

    addprim(0, 'poly', p0, p1, p3, p2);
    addprim(0, 'poly', p2, p4, p0);
    addprim(0, 'poly', p0, p4, p1);
    addprim(0, 'poly', p1, p4, p3);
    addprim(0, 'poly', p3, p4, p2);
}

pyramid(chv('pos'));//读取通道数据

//四面体
void tetra(vector pos)
{
    float a = 3 / sqrt(3);
    float height = sqrt(a * a - 1);
    int p0 = addpoint(0, pos + set(0, height, 0));
    int p1 = addpoint(0, pos + {-1, 0, 0});
    int p2 = addpoint(0, pos + set(0.5, 0, a / 2));
    int p3 = addpoint(0, pos + set(0.5, 0, -a / 2));

    addprim(0, 'poly', p0, p1, p3);
    addprim(0, 'poly', p0, p2, p1);
    addprim(0, 'poly', p0, p3, p2);
    addprim(0, 'poly', p1, p2, p3);
}

// tetra(chv('pos'));//读取通道数据

// for (int i = 0; i < 5; i++)
// {
//        tetra(set( i * 2, 0, 0));
// }

void tetraRow(vector startPos; int count){
    for (int i = 0; i < count; i++)
    {
       tetra(startPos + set(i * 2, 0, 0));
    }
}